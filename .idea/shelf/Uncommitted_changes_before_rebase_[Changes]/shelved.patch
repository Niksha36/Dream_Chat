Index: app/src/main/java/com/example/dreamchat/ViewModels/ChatViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.dreamchat.ViewModels\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.SharedPreferences\r\nimport android.net.Uri\r\nimport android.util.Log\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.dreamchat.model.UserData\r\nimport com.example.dreamchat.repository.FirebaseRepository\r\nimport com.example.dreamchat.util.CreatingStates\r\nimport com.example.dreamchat.util.getObject\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport io.getstream.chat.android.client.ChatClient\r\nimport io.getstream.chat.android.client.api.models.QueryUsersRequest\r\nimport io.getstream.chat.android.models.Filters\r\nimport io.getstream.chat.android.models.User\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.flow.MutableSharedFlow\r\nimport kotlinx.coroutines.flow.MutableStateFlow\r\nimport kotlinx.coroutines.flow.SharedFlow\r\nimport kotlinx.coroutines.flow.StateFlow\r\nimport kotlinx.coroutines.flow.asSharedFlow\r\nimport kotlinx.coroutines.flow.asStateFlow\r\nimport kotlinx.coroutines.launch\r\nimport java.util.UUID\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass ChatViewModel @Inject constructor(\r\n    private val client: ChatClient,\r\n    val firebaseRepository: FirebaseRepository,\r\n    val sharedPreferences: SharedPreferences\r\n) : ViewModel() {\r\n    var loadContactsFlag = true\r\n    private val _loginEvent = MutableSharedFlow<CreatingStates>()\r\n    val loginEvent: SharedFlow<CreatingStates> = _loginEvent\r\n\r\n    private val _createChannelEvent = MutableSharedFlow<CreatingStates>()\r\n    val createChannelEvent = _createChannelEvent.asSharedFlow()\r\n\r\n    private val _registeredUsersFromContacts =\r\n        MutableStateFlow<MutableList<UserData>>(mutableListOf())\r\n    val registeredUsersFromContacts = _registeredUsersFromContacts.asStateFlow()\r\n\r\n    private val _selectedContacts = MutableStateFlow<MutableList<UserData>>(mutableListOf())\r\n    val selectedContacts = _selectedContacts.asStateFlow()\r\n\r\n    //Picture from CreateChannelFragment\r\n    private val _channelImageUri = MutableStateFlow<Uri?>(null)\r\n    val channelImageUri: StateFlow<Uri?> = _channelImageUri\r\n\r\n    val selectedUserIds: MutableList<String> = mutableListOf()\r\n\r\n    private val _userImageUri = MutableStateFlow<String>(\"\")\r\n    val userImageUri: StateFlow<String> = _userImageUri\r\n\r\n    private val _logoutEvent = MutableSharedFlow<CreatingStates>()\r\n    val logoutEvent = _logoutEvent.asSharedFlow()\r\n\r\n    fun getUser(): User? = client.getCurrentUser()\r\n\r\n    fun setUser() {\r\n        Log.e(\"SplashScreen\", \"setUser called!\")\r\n        val user = sharedPreferences.getObject<User>(\"user\")\r\n        user?.let { connectUser(it) }\r\n    }\r\n\r\n    @SuppressLint(\"CheckResult\")\r\n    fun logOut() {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            val user = getUser()\r\n            try {\r\n                firebaseRepository.saveUserToFirestore(user!!.id, user)\r\n                Log.e(\"saveUserDataToFirestore\", \"User data has been successfully saved\")\r\n                client.disconnect(true).enqueue { result ->\r\n                    viewModelScope.launch {\r\n                        if (result.isSuccess) {\r\n                            Log.d(\"ChatViewModel\", \"User disconnected successfully\")\r\n                            _logoutEvent.emit(CreatingStates.Success)\r\n                        } else {\r\n                            _logoutEvent.emit(CreatingStates.Error(\"An error occurred: could not disconnect the user\"))\r\n                            Log.e(\"ChatViewModel\", \"Failed to disconnect user: ${result.errorOrNull()}\")\r\n                        }\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                _logoutEvent.emit(CreatingStates.Error(\"An error occurred saving user data: ${e.message.toString()}\"))\r\n                Log.e(\"saveUserDataToFirestore\", \"Error occurred: ${e.message.toString()}\")\r\n            }\r\n        }\r\n    }\r\n\r\n    //Create chat function\r\n    fun createChat(chatName: String, chatImageUrl: String, userIds: MutableList<String>) =\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            val currentUser = getUser()!!.id\r\n            val listOfUsers = userIds.toMutableList().apply { add(currentUser) }.toList()\r\n            val result = client.createChannel(\r\n                channelType = \"messaging\",\r\n                channelId = UUID.randomUUID().toString(),\r\n                memberIds = listOfUsers,\r\n                extraData = mapOf(\r\n                    \"name\" to chatName,\r\n                    \"image\" to chatImageUrl\r\n                )\r\n            ).await()\r\n            if (result.isFailure) {\r\n                _createChannelEvent.emit(CreatingStates.Error(\"Could not create a channel\"))\r\n                return@launch\r\n            }\r\n            _createChannelEvent.emit(CreatingStates.Success)\r\n        }\r\n\r\n    //saving selected contacts\r\n    fun saveSelectedContact(user: UserData) {\r\n        _selectedContacts.value = _selectedContacts.value.apply { add(user) }\r\n        selectedUserIds.add(user.id)\r\n    }\r\n\r\n    //deleting unselected contact\r\n    fun deleteUnselectedContact(user: UserData) {\r\n        _selectedContacts.value = _selectedContacts.value.apply { remove(user) }\r\n        selectedUserIds.remove(user.id)\r\n    }\r\n\r\n    //Finding registered users\r\n    fun findRegisteredUsersFromContacts(listOfUserId: Set<String>) {\r\n        val listOfRegisteredContacts: MutableList<UserData> = mutableListOf()\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            val correctListOfUserId = listOfUserId.map { convertPhoneNumber(it) }.toSet()\r\n            val registeredUsers = getAllRegisteredUsers()\r\n            val registeredUsersInContacts = registeredUsers.filter { it.id in correctListOfUserId }\r\n            if (registeredUsersInContacts.isNotEmpty()) {\r\n                for (user in registeredUsersInContacts) {\r\n                    listOfRegisteredContacts.add(\r\n                        UserData(\r\n                            id = user.id,\r\n                            name = user.name,\r\n                            image = user.image\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n            _registeredUsersFromContacts.emit(listOfRegisteredContacts)\r\n        }\r\n    }\r\n\r\n    //fetching all registered users in app\r\n    private suspend fun getAllRegisteredUsers(): List<User> {\r\n        val request = QueryUsersRequest(\r\n            filter = Filters.ne(\"id\", getUser()!!.id),\r\n            offset = 0,\r\n            limit = 100,\r\n        )\r\n        val result = client.queryUsers(request).await()\r\n        val users = result.getOrNull()\r\n        return if (result.isSuccess && !users.isNullOrEmpty()) {\r\n            users\r\n        } else {\r\n            emptyList()\r\n        }\r\n    }\r\n\r\n    //checking phone fun\r\n    private fun convertPhoneNumber(phoneNumber: String): String {\r\n        val numericPhoneNumber = phoneNumber.filter { it.isDigit() }\r\n\r\n        // Ensure the phone number starts with '7'\r\n        return if (numericPhoneNumber.startsWith(\"7\")) {\r\n            numericPhoneNumber\r\n        } else if (numericPhoneNumber.startsWith(\"8\")) {\r\n            \"7\" + numericPhoneNumber.drop(1)\r\n        } else {\r\n            numericPhoneNumber\r\n        }\r\n    }\r\n\r\n    //setting imgeUri to _userImageUri\r\n    fun setImageUri(imageUri: Uri) {\r\n        _channelImageUri.value = imageUri\r\n    }\r\n\r\n    fun setUserImageUri(imageUri: String) {\r\n        _userImageUri.value = imageUri\r\n    }\r\n\r\n    //getting imgeUri from _userImageUri\r\n    fun getImageUri() = channelImageUri.value\r\n\r\n    fun isLoggedIn() = firebaseRepository.isLoggedIn()\r\n\r\n    //set user\r\n    fun connectUser(user: User) {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            val token = client.devToken(user.id)\r\n            val result = client.connectUser(user, token).await()\r\n            if (result.isFailure) {\r\n                Log.e(\"CrashCheck\", result.errorOrNull().toString())\r\n                _loginEvent.emit(CreatingStates.Error(\"An error occurred:${result.errorOrNull()}\"))\r\n                return@launch\r\n            }\r\n            Log.e(\"CrashCheck\", \"Success log in to stream\")\r\n            _loginEvent.emit(CreatingStates.Success)\r\n        }\r\n    }\r\n\r\n    fun changeUserData(name: String, lastname: String, userId: String) {\r\n        client.disconnect(true).enqueue { result ->\r\n            if (result.isSuccess) {\r\n                Log.d(\"ChatViewModel\", \"User disconnected successfully\")\r\n                viewModelScope.launch(Dispatchers.IO) {\r\n                    val user = User(\r\n                        id = userId,\r\n                        name = \"$name $lastname\",\r\n                        image = userImageUri.value\r\n                    )\r\n                    Log.e(\"User data\", user.id)\r\n                    val token = client.devToken(user.id)\r\n                    val connectUserResult = client.connectUser(user, token).await()\r\n                    if (connectUserResult.isFailure) {\r\n                        Log.e(\"Checking Stream\", connectUserResult.errorOrNull().toString())\r\n                        _loginEvent.emit(CreatingStates.Error(\"An error occurred\"))\r\n                        return@launch\r\n                    }\r\n                    Log.e(\"Checking Stream\", \"Data has been successfully changed\")\r\n                    _loginEvent.emit(CreatingStates.Success)\r\n                }\r\n            } else {\r\n                Log.e(\"ChatViewModel\", \"Failed to disconnect user: ${result.errorOrNull()}\")\r\n            }\r\n        }\r\n    }\r\n\r\n    fun sighOutFireauth() = viewModelScope.launch(Dispatchers.IO) {\r\n        firebaseRepository.signOut()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/dreamchat/ViewModels/ChatViewModel.kt b/app/src/main/java/com/example/dreamchat/ViewModels/ChatViewModel.kt
--- a/app/src/main/java/com/example/dreamchat/ViewModels/ChatViewModel.kt	(revision d1cbb83af871ecc282a5a0437b23dbd81f5e2941)
+++ b/app/src/main/java/com/example/dreamchat/ViewModels/ChatViewModel.kt	(date 1725600523636)
@@ -80,7 +80,10 @@
                             _logoutEvent.emit(CreatingStates.Success)
                         } else {
                             _logoutEvent.emit(CreatingStates.Error("An error occurred: could not disconnect the user"))
-                            Log.e("ChatViewModel", "Failed to disconnect user: ${result.errorOrNull()}")
+                            Log.e(
+                                "ChatViewModel",
+                                "Failed to disconnect user: ${result.errorOrNull()}"
+                            )
                         }
                     }
                 }
